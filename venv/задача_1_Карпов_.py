# Мы разрабатываем софт для магазина программистов. 
# Покупатели вводят названия товаров в терминал и таким образом совершают покупки.

# В словаре products хранятся названия и стоимость товаров.

products = {
    "ноутбук": 5000,
    "смартфон": 20000,
    "наушники": 1000,
    "монитор": 10000,
    "клавиатура": 500,
    "мышь": 200,
    "роутер": 1500,
    "принтер": 5000,
    "флешка": 1000,
    "жесткий диск": 3000
}

# total_cost, orders_info = calculate_order_cost(products, 'ноутбук', 'роутер') 
# print(total_cost) # 6500
# print(orders_info) # {'ноутбук': 1, 'роутер': 1}

# total_cost, orders_info = calculate_order_cost(products , 'мышь', 'флешка', 'монитор', 'кабель', 'мышь') 
# print(total_cost) # 11400
# print(orders_info) # {'мышь': 2, 'флешка': 1, 'монитор': 1}


# Создайте функцию calculate_order_cost, которая получает на вход словарь с товарами, 
# а далее неограниченное количество аргументов: название товаров, которые выбрал покупатель. 
# Если товара нет в products, просто не учитываем этот товар.
# Функция возвращает два значения: суммарную стоимость заказа, словарь купленных товаров, 
# где ключ — название товара, значение число единиц товара. 
products = {
    "ноутбук": 5000,
    "смартфон": 20000,
    "наушники": 1000,
    "монитор": 10000,
    "клавиатура": 500,
    "мышь": 200,
    "роутер": 1500,
    "принтер": 5000,
    "флешка": 1000,
    "жесткий диск": 3000
}






def calculate_order_cost(**kwargs): 
    sum_product = 0
    for k,v in kwargs.items():
        sum_product += v
        return sum_product 
print(calculate_order_cost(products))    